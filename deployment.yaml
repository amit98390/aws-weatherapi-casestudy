AWSTemplateFormatVersion: 2010-09-09
Description: "Deploy app using AWS CLoudformation"

Parameters:
  Environment:
    Type: String
    Description: Environment Name

  ElementName:
    Type: String
    Default: EmpId
    Description: Name

  ElementType:
    Type: String
    Default: S
    Description: Type

  StageName:
    Type: String
    Default: Dev

Resources:
  
  iamLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: "weather-app-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:TagResource'
                  - 'dynamodb:UntagResource'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                Resource: '*'
              - Effect: "Allow"
                Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                Resource: "*"
  
  WeatherDetailTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: !Ref ElementName
          AttributeType: !Ref ElementType
      KeySchema:
        - AttributeName: !Ref ElementName
          KeyType: HASH
      TableName: WeatherDetail
      ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DependsOn:
      - iamLambdaRole

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Deploy Springboot app to Lambda function"
      FunctionName: !Sub open-weather-map-api${Environment}
      Handler: com.casestudy.a61098390.awsWeatherApiCasestudy.StreamLambdaHandler::handleRequest
      MemorySize: 128
      Role: !GetAtt iamLambdaRole.Arn
      Runtime: java17
      Timeout: 100
      Environment:
        Variables:
          key1: value1 # A map of key-value pairs that the Lambda function can access
      Code:
        S3Bucket: new-bucket-for-artfact
        S3Key: WeatherApp.jar
      Tags:
        - Key: keyname
          Value: value
    DependsOn:
      - WeatherDetailTable
  
  MyLambdaRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: A Rest API to integrate with Lambda function
      Name: MyLambdaRestApi
    DependsOn:
      - lambdaFunction

  MyLambdaRestApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref MyLambdaRestApi
      ParentId: !GetAtt
        - MyLambdaRestApi
        - RootResourceId
      PathPart: !GetAtt lambdaFunction.FunctionName
    DependsOn:
      - MyLambdaRestApi
  
  MyLambdaRestApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref MyLambdaRestApi
      ResourceId: !Ref MyLambdaRestApiResource
      HttpMethod: ANY
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub
          - >-
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncNameArn}/invocations
          - LambdaFuncNameArn: !GetAtt lambdaFunction.Arn
    DependsOn:
      - MyLambdaRestApiResource
  
  MyLambdaRestApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref MyLambdaRestApi
      StageName: !Ref StageName
    DependsOn:
      - MyLambdaRestApiMethod

  MyLambdaRestApiPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - MyLambdaRestApiDeployment


Outputs:
  lambdaFunction:
    Description: "Lambda funciton created"
    Value: !Ref lambdaFunction
  WeatherDetailTable:
    Description: "Employee Dynamo DB created"
    Value: !Ref WeatherDetailTable