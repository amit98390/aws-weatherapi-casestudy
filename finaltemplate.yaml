Resources:
  WeatherDynamoTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: WeatherDetail
      AttributeDefinitions:
        - AttributeName: createdTime
          AttributeType: N
      KeySchema:
        - AttributeName: createdTime
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  WeatherEventRuleInvokeApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: "aws-weather-app-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 'execute-api:Invoke'
                  - 'execute-api:ManageConnections'
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':execute-api:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':'
                    - !Ref WeatherRestApi
                    - /
                    - '*'

  WeatherLambdaDynamoDBRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: This role allow Lambda to access Dynamo DB.
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  WeatherDynamoDBPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'dynamodb:BatchGetItem'
              - 'dynamodb:BatchWriteItem'
              - 'dynamodb:ConditionCheckItem'
              - 'dynamodb:DeleteItem'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:GetItem'
              - 'dynamodb:GetRecords'
              - 'dynamodb:GetShardIterator'
              - 'dynamodb:PutItem'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:UpdateItem'
            Effect: Allow
            Resource:
              - !GetAtt 
                - WeatherDynamoTable
                - Arn
              - !Ref 'AWS::NoValue'
        Version: 2012-10-17
      PolicyName: WeatherDynamoDBPolicy
      Roles:
        - !Ref WeatherLambdaDynamoDBRole

  WeatherLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: This Lambda function used to deploy the Weather app.
      Code:
        S3Bucket: aws-weather-app-bucket
        S3Key: awsWeatherApiCasestudy-lambda-package.zip
      Environment:
        Variables:
          TABLE_NAME: !Ref WeatherDynamoTable
      Handler: com.casestudy.a61098390.awsWeatherApiCasestudy.StreamLambdaHandler::handleRequest
      MemorySize: 1024
      Role: !GetAtt 
        - WeatherLambdaDynamoDBRole
        - Arn
      Runtime: java17
      Timeout: 30
    DependsOn:
      - WeatherDynamoDBPolicy
      - WeatherLambdaDynamoDBRole

  WeatherRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: This Rest API used to access weather app deployed in Lambda function.
      Name: Weather-app-rest-api

  WeatherApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - WeatherRestApi
        - RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref WeatherRestApi

  WeatherApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: ANY
        Type: AWS_PROXY
        Uri: !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - WeatherLambdaFunction
              - Arn
            - /invocations
      ResourceId: !Ref WeatherApiResource
      RestApiId: !Ref WeatherRestApi

  WeatherApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      Description: This Deployment used to deploy the Rest API.
      RestApiId: !Ref WeatherRestApi
    DependsOn:
      - WeatherApiMethod
      - WeatherApiResource

  WeatherApiDeploymentStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      Description: This creates the Stage for the Rest API deployment.
      DeploymentId: !Ref WeatherApiDeployment
      RestApiId: !Ref WeatherRestApi
      StageName: prod

  WeatherApiLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt WeatherLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref WeatherRestApi
          - /
          - '*'
          - /
          - '*'
          - /
          - '*'

  WeatherEventBridgeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: WeatherEventBridgeRule
      Description: This creates an event bridge rule to trigger the Lambda function.
      ScheduleExpression: rate(3 minutes)
      State: ENABLED
      RoleArn: !GetAtt WeatherEventRuleInvokeApiGatewayRole.Arn
      Targets:
        - Arn: !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':execute-api:'
            - !Ref AWS::Region
            - ':'
            - !Ref AWS::AccountId
            - ':'
            - !Ref WeatherRestApi
            - /
            - !Ref WeatherApiDeploymentStage
            - /
            - '*'
          Id: WeatherRestApiTarget
          RoleArn: !GetAtt WeatherEventRuleInvokeApiGatewayRole.Arn
          HttpParameters:
            PathParameterValues: 
              - 'add/{city}'
            QueryStringParameters: 
              'city': 'Pune'

Outputs:
  WeatherAppEndpoint:
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref WeatherRestApi
        - .execute-api.
        - !Ref 'AWS::Region'
        - .
        - !Ref 'AWS::URLSuffix'
        - /
        - !Ref WeatherApiDeploymentStage
        - /
